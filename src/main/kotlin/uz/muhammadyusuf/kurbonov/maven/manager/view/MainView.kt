package uz.muhammadyusuf.kurbonov.maven.manager.view


import javafx.event.EventHandler
import javafx.geometry.Insets
import javafx.geometry.Pos
import javafx.scene.control.*
import javafx.scene.layout.Priority
import javafx.scene.paint.Color
import tornadofx.*
import tornadofx.controlsfx.progressDialog
import uz.muhammadyusuf.kurbonov.maven.manager.app.Styles
import uz.muhammadyusuf.kurbonov.maven.manager.icons.CODE
import uz.muhammadyusuf.kurbonov.maven.manager.icons.SYNC
import uz.muhammadyusuf.kurbonov.maven.manager.model.Dependency
import uz.muhammadyusuf.kurbonov.maven.manager.model.DependencyProvider
import java.io.File
import java.util.*


class MainView : View("Maven Manager") {

    private val listOfSelected = mutableListOf<String>()
    private var currentPage = 0
        set(value) {
            field = value
            root.lookup("#prev").enableWhen {
                (value > 0).toProperty()
            }
        }

    private fun ToolBar.toolbarbutton(text: String = "", svg: String? = null, op: Button.() -> Unit = {}) = button {
        if (svg != null)
            icon = svgicon(svg, size = 20, color = Color.LIGHTGRAY)
        if (text.isNotEmpty()) this.text = text

        onMouseEntered = EventHandler {
            addPseudoClass("mouse_in")
        }
        onMouseExited = EventHandler {
            removePseudoClass("mouse_in")
        }
        addClass(Styles.toolbar_button)
        op(this)
    }.attachTo(this)

    override val root = borderpane {


        top {

            toolbar {

                toolbarbutton(svg = SYNC) {
                    onAction = EventHandler {
                        progressDialog {
                            DependencyProvider().optimizeIndexes(reload = true,
                                    onMessageChange = {
                                        updateMessage(it)
                                    },
                                    onProgressChange = {
                                        updateProgress(it, 1.0)
                                    })
//                            getDefault().post(9)
                        }
                    }
                }

                toolbarbutton(text = "Generate code", svg = CODE) {

                    onAction = EventHandler {
                        val result = File("build.gradle.code")
                        if (!result.exists()) result.createNewFile()
                        result.writeText("//Generated by Maven Manager\n")
                        listOfSelected.forEach {
                            var preffix = "implementation"
                            if (it.contains("test")) {
                                preffix = "testImplementation"
                            }
                            if (it.contains("compiler"))
                                preffix = "kapt"

                            result.appendText("\t$preffix \"$it\" \n")
                        }
                        Runtime.getRuntime().exec("AkelPad\\AkelPad.exe " + result.absolutePath)
                    }
                }

                toolbarbutton("Reset") {
                    onAction = EventHandler {
                        listOfSelected.clear()
                    }
                }

            }

        }






        center = vbox {

            hbox {
                alignment = Pos.TOP_RIGHT

                vboxConstraints {
                    margin = Insets(8.0, 0.0, 4.0, 0.0)
                }

                textfield {
                    id = "search_exp"

                    hboxConstraints {
                        hGrow = Priority.ALWAYS
                        margin = Insets(0.0, 8.0, 0.0, 4.0)
                    }

                }

                button {
                    text = "Search"
                    icon = svgicon("M505 442.7L405.3 343c-4.5-4.5-10.6-7-17-7H372c27.6-35.3 44-79.7 44-128C416 93.1 322.9 0 208 0S0 93.1 0 208s93.1 208 208 208c48.3 0 92.7-16.4 128-44v16.3c0 6.4 2.5 12.5 7 17l99.7 99.7c9.4 9.4 24.6 9.4 33.9 0l28.3-28.3c9.4-9.4 9.4-24.6.1-34zM208 336c-70.7 0-128-57.2-128-128 0-70.7 57.2-128 128-128 70.7 0 128 57.2 128 128 0 70.7-57.2 128-128 128z")

                    isDefaultButton = true

                    hboxConstraints {
                        marginRight = 4.0
                    }

                    onAction = EventHandler {
                        currentPage = 0
                        updateFilteredData((parent.lookup("#search_exp") as TextField).text)
                    }
                }
            }
            flowpane {
                alignment = Pos.CENTER_LEFT
                vgap = 8.0
                hgap = 4.0

                id = "deps"
            }
        }




        bottom = hbox {

            hbox {
                alignment = Pos.CENTER_LEFT
                button {
                    text = "Prev"
                    id = "prev"
                    onAction = EventHandler {
                        currentPage--
                        refreshData()
                    }
                    enableWhen {
                        (currentPage > 0).toProperty()
                    }
                }
                button {
                    text = "Next"
                    id = "next"
                    onAction = EventHandler {
                        currentPage++
                        refreshData()
                    }
                }

            }



            hbox {
                alignment = Pos.CENTER

                hboxConstraints {
                    marginLeft = 32.0
                }

                id = "progress_bar"
                progressindicator {
                    id = "indicator"
                    setPrefSize(64.0, 64.0)
                }
                label {
                    id = "progress_description"
                }
            }

        }

        prefWidth = 1000.0
        prefHeight = 650.0
        usePrefSize = true

    }


    private fun generateButton(dependency: Dependency): Button {
        return button {


            vbox {
                label {
                    text = dependency.groupName
                    addClass(Styles.groupId)
                }
                label {
                    text = dependency.artifactID
                    addClass(Styles.artifactId)
                }
                label {
                    text = dependency.version
                    addClass(Styles.version)
                }
            }
            userData = dependency.toID()

            addClass(if (listOfSelected.contains(this.userData)) {
                Styles.dep_button_selected
            } else {
                Styles.dep_button
            })

            onAction = EventHandler {
                if (hasClass(Styles.dep_button)) {
                    addClass(Styles.dep_button_selected)
                    removeClass(Styles.dep_button)
                    listOfSelected.add(this.userData as String)
                } else {
                    addClass(Styles.dep_button)
                    removeClass(Styles.dep_button_selected)
                    listOfSelected.remove(this.userData as String)
                }
            }

        }
    }


    override fun onDock() {
        super.onDock()
        refreshData()
    }

    private fun refreshData() {
        updateFilteredData((root.lookup("#search_exp") as TextField).text)
    }

    private fun updateFilteredData(filter: String) {
        with(root) {

            val listDeps = LinkedList<Dependency>()

            println(filter)
            val container = lookup("#deps")
            val progressGroup = lookup("#progress_bar")
            val progressDescription = lookup("#progress_description") as Label
            val progressIndicator = lookup("#indicator") as ProgressIndicator
            container.replaceChildren { }


            val task = task {
                updateMessage("#show")
                updateTitle("Starting loading ...")
                updateProgress(0.01, 1.0)
                var i = 0
                val take = DependencyProvider().loadArtifactsAsync()
                        .filter {
                            if (filter.isNotEmpty() && filter != "*") it.toID().contains(filter)
                            else true
                        }
                        .skip(currentPage * 25L)
                        .take(25)
                        .doOnComplete {
                            updateProgress(0.9, 1.0)
                            updateProgress(1.0, 1.0)
                            updateMessage("#refresh")
                            updateTitle(" Finished!")
                            Thread.sleep(1000)
                            updateMessage("#hide")
                        }
                take.subscribe {
                    listDeps += it
                    updateMessage("#refresh")
                    updateTitle("Loading " + it.toID())
                    updateProgress((i++) * 0.039, 1.0)
                }

            }
            task.messageProperty().onChange { msg ->
                if (msg == null) return@onChange

                when (msg) {
                    "#show" -> {
                        progressGroup.isVisible = true
                        progressIndicator.progressProperty().bind(task.progressProperty())
                        progressDescription.textProperty().bind(task.titleProperty())
                    }
                    "#hide" -> {
                        progressIndicator.progressProperty().unbind()
                        progressDescription.textProperty().unbind()
                        progressGroup.isVisible = false
                        requestLayout()
                    }
                    "#refresh" -> {
                        while (!listDeps.isEmpty()) {
                            container += generateButton(listDeps.poll())
                        }
                    }
                }
            }
            task.run()


        }
    }

}